[subDialOut2]
exten => _X!,1,NoOp()
 same => n,Verbose(1,-------- subDialOut-1 ------)
 same => n,Set(LOCAL(trunk)=${ARG1})
 same => n,Set(LOCAL(db)=${ARG2})
 same => n,Set(LOCAL(phoneb)=${EXTEN})
 same => n,Set(LOCAL(phonea)=${ARG4})
 same => n,Set(LOCAL(opt)=)
 same => n,Set(LOCAL(d)=)
 same => n,While($[${LEN(${trunk})} != 0])
   same => n,Set(LOCAL(ctrunk)=)
   same => n,Set(LOCAL(climitdb)=)
   same => n,Set(LOCAL(limit)=)
   same => n,Set(LOCAL(item)=${SHIFT(trunk,&)})
   same => n,Set(ctrunk=${CUT(item,-,1)})
   same => n,Set(climitdb=${CUT(item,-,2)})
   same => n,Gosub(subChkLimit,s,1(${climitdb}))
   same => n,GotoIf($[${GOSUB_RETVAL} > 0]?:nextline)
     same => n,Gosub(${ctrunk},1)
     ;same => n,Set(d=${GOSUB_RETVAL})
     same => n,Set(opt=U(subPreBridgeDO2^${climitdb}))
     same => n,DumpChan(4)
     same => n,Dial(${d},60,${opt})
     same => n,Gotoif($[${DIALSTATUS} = CONGESTION]?nextline)
     same => n,Gotoif($[${DIALSTATUS} = CHANUNAVAIL]?nextline)
     same => n,Gotoif($[${DIALSTATUS} = BUSY]?hangup:nextline)
     same => n(hangup),Hangup()
   same => n(nextline),NoOp()
 same => n,EndWhile()

exten => _PJSIP!,1,NoOp()
 same => n,Set(LOCAL(ctrunktech)=${CUT(ctrunk,/,1)})
 same => n,Set(LOCAL(ctrunkname)=${CUT(ctrunk,/,2)})
 same => n,Set(d=${ctrunktech}/${phoneb}@${ctrunkname})
 same => n,Return()

exten => _SIP!,1,NoOp()
 same => n,Set(d=${ctrunk}/${phoneb})
 same => n,Return()


  


[subChkLimitAH]
exten => s,1,NoOp()
 same => n,Verbose(1,=============== ${CONTEXT} ===================)
 ;same => n,GotoIf($[${DIALSTATUS} != ANSWER ]?end)
   same => n,Set(LOCAL(limitdb)=${ARG1})
   ;same => n,Set(LOCAL(m)=$[${ANSWEREDTIME}+1])
   same => n,Set(LOCAL(m)=$[${EPOCH}-${ARG2}+1])
   same => n,NoOp(${IF($[${m}>2]?${MATH($[${m}+59]/60,int)}:0)})
   same => n,NoOp($[${m}>2])
   same => n,NoOp($[${m}+59])
   same => n,NoOp(${MATH($[${m}+59]/60,int)})
   same => n,Set(LOCAL(x)=${IF($[${m}>2]?${MATH($[${m}+59]/60,int)}:0)})
   ;same => n,NoOp(======= ${DB(${limitdb}/ans_time)})
   ;same => n,NoOp(======= $[${DB(${limitdb}/ans_time)} + ${x}])
   same => n,Set(DB(${limitdb}/ans_time)=$[${DB(${limitdb}/ans_time)} + ${x}])
 same => n(end),NoOp()
; same => n,DumpChan()
 same => n,Return()


[subPreBridgeDO2]
exten => s,1,NoOp()
 same => n,Set(LOCAL(limitdb)=${ARG1})
 same => n,Set(LOCAL(ans)=${EPOCH})
 same => n,Set(CHANNEL(hangup_handler_push)=subChkLimitAH,s,1(${limitdb},${ans})); проверить сколько раз вызывается если звонок был по двум каналам
 same => n,Return()

[subChkLimit]
exten => s,1,NoOp()
 same => n,Set(LOCAL(limitdb)=${ARG1})
 same => n,Set(LOCAL(intmask)=${DB(${limitdb}/intmask)})
 same => n,Set(LOCAL(max)=${DB(${limitdb}/max)})
 same => n,Set(LOCAL(ans_time)=${DB(${limitdb}/ans_time)})
 same => n,Set(LOCAL(leftover)=$[${max}-${ans_time}])
 same => n,GotoIf($[${DB(${limitdb}/date)} = ${STRFTIME(${EPOCH},,${intmask})}]?next)
   same => n,Set(DB(${limitdb}/date)=${STRFTIME(${EPOCH},,${intmask})})
   same => n,Set(DB(${limitdb}/ans_time)=0)
   same => n,Set(LOCAL(leftover)=${max})
 same => n(next),NoOp()
 same => n,Gotoif($[${leftover} <= 0]?return)
  ;same => n,Set(CHANNEL(hangup_handler_push)=subChkLimitAH,s,1(${limitdb})); проверить сколько раз вызывается если звонок был по двум каналам
 same => n(return),Return(${leftover})


[subMon]
exten => s,1,NoOp()
 same => n,Set(NOW=${ARG1})
 same => n,Set(PHONEA=${ARG2})
 same => n,Set(PHONEB=${ARG3})
 same => n,Set(PATHWAV=${IF($["${ARG4}" = ""]?${PATHWAV}:${ARG4})})   ; если не указан ARG4 сохраняем глобальный
 same => n,Set(PATHMP3=${IF($["${ARG5}" = ""]?${PATHMP3}:${ARG5})})
 same => n,Set(DF=${IF($["${ARG6}" = ""]?:${NOW})}) ; определяет в какую папку сохранять файл (указанную или создать подпапки с датой)
 same => n,Set(FILE=${STRFTIME(${NOW},,%Y%m%d-%H%M%S)}_${PHONEA}-${PHONEB})
 same => n,Set(MONCMD=sh ${PATHSCRCONV} ${PATHWAV}/${FILE}.wav ${PATHMP3}/${FILE}.mp3 ${DF})
 same => n,Verbose(1,==== ${UNIQUEID_1} -=subMon=- Monitor call ${PHONEA}-${PHONEB})
 same => n,MixMonitor(${PATHWAV}/${FILE}.wav,,${MONCMD})
 same => n(end),Return()

